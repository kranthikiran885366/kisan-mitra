class WhatsAppService {
  constructor() {
    this.isEnabled = false;
    
    // Only initialize Twilio if credentials are provided
    if (process.env.TWILIO_ACCOUNT_SID && process.env.TWILIO_AUTH_TOKEN) {
      try {
        const twilio = require("twilio");
        this.client = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);
        this.whatsappNumber = process.env.TWILIO_WHATSAPP_NUMBER || "whatsapp:+14155238886";
        this.isEnabled = true;
      } catch (error) {
        console.warn("тЪая╕П  Twilio initialization failed:", error.message);
      }
    } else {
      console.warn("тЪая╕П  WhatsApp service is disabled. TWILIO_ACCOUNT_SID and TWILIO_AUTH_TOKEN are required.");
    }
  }

  // Send OTP via WhatsApp
  async sendOTP(mobile, otp, language = "en") {
    if (!this.isEnabled) {
      console.warn("тЪая╕П  WhatsApp service is disabled. Cannot send OTP.");
      return { success: false, message: "WhatsApp service is disabled" };
    }

    try {
      const messages = {
        en: `ЁЯМ╛ Kisan Mitra Verification\n\nYour OTP is: ${otp}\n\nThis code will expire in 10 minutes.\n\nDo not share this code with anyone.`,
        hi: `ЁЯМ╛ рдХрд┐рд╕рд╛рди рдорд┐рддреНрд░ рд╕рддреНрдпрд╛рдкрди\n\nрдЖрдкрдХрд╛ OTP рд╣реИ: ${otp}\n\nрдпрд╣ рдХреЛрдб 10 рдорд┐рдирдЯ рдореЗрдВ рд╕рдорд╛рдкреНрдд рд╣реЛ рдЬрд╛рдПрдЧрд╛ред\n\nрдЗрд╕ рдХреЛрдб рдХреЛ рдХрд┐рд╕реА рдХреЗ рд╕рд╛рде рд╕рд╛рдЭрд╛ рди рдХрд░реЗрдВред`,
        te: `ЁЯМ╛ р░Хр░┐р░╕р░╛р░ир▒Н р░ор░┐р░др▒Нр░░ р░╡р▒Жр░░р░┐р░лр░┐р░Хр▒Зр░╖р░ир▒Н\n\nр░ор▒А OTP: ${otp}\n\nр░И р░Хр▒Лр░бр▒Н 10 р░ир░┐р░ор░┐р░╖р░╛р░▓р░▓р▒Л р░Чр░бр▒Бр░╡р▒Б р░ор▒Бр░Чр▒Бр░╕р▒Нр░др▒Бр░Вр░жр░┐ред\n\nр░И р░Хр▒Лр░бр▒НтАМр░ир▒Б р░Ор░╡р░░р░┐р░др▒Лр░ир▒В р░кр░Вр░Ър▒Бр░Хр▒Лр░╡р░жр▒Нр░жр▒Бред`,
      };

      const message = messages[language] || messages.en;

      // In development or if Twilio is not configured, just log the message
      if (process.env.NODE_ENV === "development" || !this.client) {
        console.log(`[WhatsApp OTP to ${mobile}]: ${message}`);
        return { success: true, messageId: "simulated" };
      }

      const result = await this.client.messages.create({
        from: this.whatsappNumber,
        to: `whatsapp:+91${mobile}`,
        body: message,
      });

      return { success: true, messageId: result.sid };
    } catch (error) {
      console.error("WhatsApp OTP send error:", error);
      return { success: false, message: "Failed to send WhatsApp OTP" };
    }
  }

  // Send weather alert via WhatsApp
  async sendWeatherAlert(mobile, alertContent, language = "en") {
    try {
      const message = `ЁЯМдя╕П ${alertContent.title}\n\n${alertContent.message}\n\nЁЯУ▒ Open Kisan Mitra app for detailed forecast and farming advice.`

      if (process.env.NODE_ENV === "development") {
        console.log(`WhatsApp Weather Alert to ${mobile}: ${message}`)
        return { success: true, messageId: "dev-mode" }
      }

      const result = await this.client.messages.create({
        from: this.whatsappNumber,
        to: `whatsapp:+91${mobile}`,
        body: message,
      })

      return { success: true, messageId: result.sid }
    } catch (error) {
      console.error("WhatsApp weather alert send error:", error)
      throw new Error("Failed to send WhatsApp weather alert")
    }
  }

  // Send scheme notification via WhatsApp
  async sendSchemeNotification(mobile, scheme, language = "en") {
    try {
      const content = scheme.getLocalizedContent(language)

      const message = `ЁЯУв New Government Scheme Alert!\n\nЁЯОп ${content.name}\n\nЁЯУЭ ${content.description.substring(0, 200)}...\n\nЁЯТ░ Benefit: тВ╣${scheme.financialDetails.maxBenefitAmount || "Variable"}\n\nЁЯУЕ Apply before: ${scheme.timeline.applicationEndDate ? new Date(scheme.timeline.applicationEndDate).toLocaleDateString() : "Check app"}\n\nЁЯУ▒ Open Kisan Mitra app to apply now!`

      if (process.env.NODE_ENV === "development") {
        console.log(`WhatsApp Scheme Alert to ${mobile}: ${message}`)
        return { success: true, messageId: "dev-mode" }
      }

      const result = await this.client.messages.create({
        from: this.whatsappNumber,
        to: `whatsapp:+91${mobile}`,
        body: message,
      })

      return { success: true, messageId: result.sid }
    } catch (error) {
      console.error("WhatsApp scheme notification send error:", error)
      throw new Error("Failed to send WhatsApp scheme notification")
    }
  }

  // Send market price alert via WhatsApp
  async sendMarketPriceAlert(mobile, priceData, language = "en") {
    try {
      const messages = {
        en: `ЁЯУИ Market Price Alert!\n\nЁЯМ╛ ${priceData.crop}\nЁЯТ░ Current Price: тВ╣${priceData.price}/quintal\nЁЯУК Change: ${priceData.change > 0 ? "+" : ""}${priceData.change}%\nЁЯУН Market: ${priceData.market}\n\nЁЯУ▒ Check Kisan Mitra app for more markets and trends!`,
        hi: `ЁЯУИ рдмрд╛рдЬрд╛рд░ рдореВрд▓реНрдп рдЕрд▓рд░реНрдЯ!\n\nЁЯМ╛ ${priceData.crop}\nЁЯТ░ рд╡рд░реНрддрдорд╛рди рдореВрд▓реНрдп: тВ╣${priceData.price}/рдХреНрд╡рд┐рдВрдЯрд▓\nЁЯУК рдкрд░рд┐рд╡рд░реНрддрди: ${priceData.change > 0 ? "+" : ""}${priceData.change}%\nЁЯУН рдмрд╛рдЬрд╛рд░: ${priceData.market}\n\nЁЯУ▒ рдЕрдзрд┐рдХ рдмрд╛рдЬрд╛рд░реЛрдВ рдФрд░ рд░реБрдЭрд╛рдиреЛрдВ рдХреЗ рд▓рд┐рдП рдХрд┐рд╕рд╛рди рдорд┐рддреНрд░ рдРрдк рджреЗрдЦреЗрдВ!`,
        te: `ЁЯУИ р░ор░╛р░░р▒Нр░Хр▒Жр░Яр▒Н р░зр░░ р░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Х!\n\nЁЯМ╛ ${priceData.crop}\nЁЯТ░ р░кр▒Нр░░р░╕р▒Нр░др▒Бр░д р░зр░░: тВ╣${priceData.price}/р░Хр▒Нр░╡р░┐р░Вр░Яр░▓р▒Н\nЁЯУК р░ор░╛р░░р▒Нр░кр▒Б: ${priceData.change > 0 ? "+" : ""}${priceData.change}%\nЁЯУН р░ор░╛р░░р▒Нр░Хр▒Жр░Яр▒Н: ${priceData.market}\n\nЁЯУ▒ р░ор░░р░┐р░ир▒Нр░ир░┐ р░ор░╛р░░р▒Нр░Хр▒Жр░Яр▒Нр░▓р▒Б р░ор░░р░┐р░пр▒Б р░Яр▒Нр░░р▒Жр░Вр░бр▒НтАМр░▓ р░Хр▒Лр░╕р░В р░Хр░┐р░╕р░╛р░ир▒Н р░ор░┐р░др▒Нр░░ р░пр░╛р░кр▒Н р░Ър▒Вр░бр░Вр░бр░┐!`,
      }

      const message = messages[language] || messages.en

      if (process.env.NODE_ENV === "development") {
        console.log(`WhatsApp Market Alert to ${mobile}: ${message}`)
        return { success: true, messageId: "dev-mode" }
      }

      const result = await this.client.messages.create({
        from: this.whatsappNumber,
        to: `whatsapp:+91${mobile}`,
        body: message,
      })

      return { success: true, messageId: result.sid }
    } catch (error) {
      console.error("WhatsApp market alert send error:", error)
      throw new Error("Failed to send WhatsApp market alert")
    }
  }

  // Send crop advice via WhatsApp
  async sendCropAdvice(mobile, advice, language = "en") {
    try {
      const messages = {
        en: `ЁЯМ▒ Crop Advisory\n\n${advice.title}\n\nЁЯУЛ ${advice.description}\n\nтП░ Action needed: ${advice.timing}\n\nЁЯУ▒ Get detailed guidance in Kisan Mitra app!`,
        hi: `ЁЯМ▒ рдлрд╕рд▓ рд╕рд▓рд╛рд╣\n\n${advice.title}\n\nЁЯУЛ ${advice.description}\n\nтП░ рдХрд╛рд░реНрд░рд╡рд╛рдИ рдЖрд╡рд╢реНрдпрдХ: ${advice.timing}\n\nЁЯУ▒ рдХрд┐рд╕рд╛рди рдорд┐рддреНрд░ рдРрдк рдореЗрдВ рд╡рд┐рд╕реНрддреГрдд рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ!`,
        te: `ЁЯМ▒ р░кр░Вр░Я р░╕р░▓р░╣р░╛\n\n${advice.title}\n\nЁЯУЛ ${advice.description}\n\nтП░ р░Ър░░р▒Нр░п р░Ер░╡р░╕р░░р░В: ${advice.timing}\n\nЁЯУ▒ р░Хр░┐р░╕р░╛р░ир▒Н р░ор░┐р░др▒Нр░░ р░пр░╛р░кр▒НтАМр░▓р▒Л р░╡р░┐р░╡р░░р░гр░╛р░др▒Нр░ор░Х р░ор░╛р░░р▒Нр░Чр░жр░░р▒Нр░╢р░Хр░др▒Нр░╡р░В р░кр▒Кр░Вр░жр░Вр░бр░┐!`,
      }

      const message = messages[language] || messages.en

      if (process.env.NODE_ENV === "development") {
        console.log(`WhatsApp Crop Advice to ${mobile}: ${message}`)
        return { success: true, messageId: "dev-mode" }
      }

      const result = await this.client.messages.create({
        from: this.whatsappNumber,
        to: `whatsapp:+91${mobile}`,
        body: message,
      })

      return { success: true, messageId: result.sid }
    } catch (error) {
      console.error("WhatsApp crop advice send error:", error)
      throw new Error("Failed to send WhatsApp crop advice")
    }
  }

  // Send community group invite via WhatsApp
  async sendGroupInvite(mobile, groupData, language = "en") {
    try {
      const messages = {
        en: `ЁЯСе Join Farming Community!\n\nЁЯМ╛ Group: ${groupData.name}\nЁЯУН Location: ${groupData.location}\nЁЯСитАНЁЯМ╛ Members: ${groupData.memberCount}\n\n${groupData.description}\n\nЁЯФЧ Join: ${groupData.whatsappLink}\n\nЁЯУ▒ Manage groups in Kisan Mitra app!`,
        hi: `ЁЯСе рдХреГрд╖рд┐ рд╕рдореБрджрд╛рдп рдореЗрдВ рд╢рд╛рдорд┐рд▓ рд╣реЛрдВ!\n\nЁЯМ╛ рд╕рдореВрд╣: ${groupData.name}\nЁЯУН рд╕реНрдерд╛рди: ${groupData.location}\nЁЯСитАНЁЯМ╛ рд╕рджрд╕реНрдп: ${groupData.memberCount}\n\n${groupData.description}\n\nЁЯФЧ рд╢рд╛рдорд┐рд▓ рд╣реЛрдВ: ${groupData.whatsappLink}\n\nЁЯУ▒ рдХрд┐рд╕рд╛рди рдорд┐рддреНрд░ рдРрдк рдореЗрдВ рд╕рдореВрд╣реЛрдВ рдХрд╛ рдкреНрд░рдмрдВрдзрди рдХрд░реЗрдВ!`,
        te: `ЁЯСе р░╡р▒Нр░пр░╡р░╕р░╛р░п р░Хр░ор▒Нр░пр▒Вр░ир░┐р░Яр▒Ар░▓р▒Л р░Ър▒Зр░░р░Вр░бр░┐!\n\nЁЯМ╛ р░Чр▒Нр░░р▒Вр░кр▒Н: ${groupData.name}\nЁЯУН р░╕р▒Нр░ер░╛р░ир░В: ${groupData.location}\nЁЯСитАНЁЯМ╛ р░╕р░нр▒Нр░пр▒Бр░▓р▒Б: ${groupData.memberCount}\n\n${groupData.description}\n\nЁЯФЧ р░Ър▒Зр░░р░Вр░бр░┐: ${groupData.whatsappLink}\n\nЁЯУ▒ р░Хр░┐р░╕р░╛р░ир▒Н р░ор░┐р░др▒Нр░░ р░пр░╛р░кр▒НтАМр░▓р▒Л р░Чр▒Нр░░р▒Вр░кр▒Бр░▓р░ир▒Б р░ир░┐р░░р▒Нр░╡р░╣р░┐р░Вр░Ър░Вр░бр░┐!`,
      }

      const message = messages[language] || messages.en

      if (process.env.NODE_ENV === "development") {
        console.log(`WhatsApp Group Invite to ${mobile}: ${message}`)
        return { success: true, messageId: "dev-mode" }
      }

      const result = await this.client.messages.create({
        from: this.whatsappNumber,
        to: `whatsapp:+91${mobile}`,
        body: message,
      })

      return { success: true, messageId: result.sid }
    } catch (error) {
      console.error("WhatsApp group invite send error:", error)
      throw new Error("Failed to send WhatsApp group invite")
    }
  }

  // Send bulk message to multiple users
  async sendBulkMessage(recipients, message, language = "en") {
    try {
      const results = []

      for (const recipient of recipients) {
        try {
          const result = await this.client.messages.create({
            from: this.whatsappNumber,
            to: `whatsapp:+91${recipient.mobile}`,
            body: message,
          })

          results.push({
            mobile: recipient.mobile,
            success: true,
            messageId: result.sid,
          })
        } catch (error) {
          results.push({
            mobile: recipient.mobile,
            success: false,
            error: error.message,
          })
        }

        // Add delay to avoid rate limiting
        await new Promise((resolve) => setTimeout(resolve, 1000))
      }

      return results
    } catch (error) {
      console.error("WhatsApp bulk message send error:", error)
      throw new Error("Failed to send WhatsApp bulk messages")
    }
  }

  // Get message status
  async getMessageStatus(messageId) {
    try {
      const message = await this.client.messages(messageId).fetch()
      return {
        status: message.status,
        errorCode: message.errorCode,
        errorMessage: message.errorMessage,
        dateCreated: message.dateCreated,
        dateSent: message.dateSent,
        dateUpdated: message.dateUpdated,
      }
    } catch (error) {
      console.error("WhatsApp message status error:", error)
      throw new Error("Failed to get WhatsApp message status")
    }
  }

  // Validate WhatsApp number
  validateWhatsAppNumber(mobile) {
    const phoneRegex = /^[6-9]\d{9}$/
    return phoneRegex.test(mobile)
  }

  // Format mobile number for WhatsApp
  formatMobileNumber(mobile) {
    // Remove any non-digit characters
    const cleaned = mobile.replace(/\D/g, "")

    // Add country code if not present
    if (cleaned.length === 10 && cleaned.match(/^[6-9]/)) {
      return `+91${cleaned}`
    }

    if (cleaned.length === 12 && cleaned.startsWith("91")) {
      return `+${cleaned}`
    }

    return mobile
  }
}

module.exports = new WhatsAppService()
